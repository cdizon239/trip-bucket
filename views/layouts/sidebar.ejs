<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <!-- mapbox cdn -->
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet'/>
    <!-- Load the `mapbox-gl-geocoder` plugin. -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.css" type="text/css">
    <!-- directions cdn  -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css" type="text/css"> 
    <!--  customizes css -->
    <link rel="stylesheet" href="/css/style.css">
    <title>TripBucket</title>
</head>
<body>
    <%- include('../partials/header.ejs') %>
    <main>
        <div class="sidebar-view">
            <div>
                <side><%- body %></side>
            </div>
            <main>
                <div id='map' style='width: 100%; height: 100vh;'></div>
            </main>
        </div>
    </main>    
    <%- include('../partials/footer.ejs') %>
    <script>
        // parse trip
        let trip = JSON.parse('<%- trip%>')
    
        mapboxgl.accessToken  = '<%= process.env.MAPBOX_ACCESS_TOKEN %>'
        
        const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v11', // style URL
        zoom: 1
        });
    
        //  add markers on the map
        if (trip.places_to_visit.length > 0) {            
            //  center map on ag long lat center across all pins
            let coordinates = trip.places_to_visit.reduce((acc, obj) => {
               if (!acc['long']) {
                   acc['long'] = []
               }
               acc['long'].push(obj['long'])
               
               if (!acc['lat']) {
                   acc['lat'] = []
               }
               acc['lat'].push(obj['lat'])
               
               return acc
            }, {})

            let newCenter = []
            for (key in coordinates) {
                let avg = coordinates[key].reduce((prev, curr) => {
                    prev = prev + curr
                    return prev
                }, 0) / coordinates[key].length
                newCenter.push(avg)
            }
            map.flyTo({
                center: newCenter,
                zoom: 14
            })

            trip.places_to_visit.forEach((pin) => {
                let marker = new mapboxgl.Marker({
                    color: "#F05441"
                }).setLngLat([pin.long, pin.lat])
                .setPopup(new mapboxgl.Popup().setHTML(`<h1>${pin.title}</h1><p>${pin.place_name}</p>`)) 
                .addTo(map);
            })
        }

        // Add zoom and rotation controls to the map.
        const nav = new mapboxgl.NavigationControl();
        map.addControl(nav, 'bottom-left');

        // Add searchbox via geocoding api: src: https://docs.mapbox.com/help/tutorials/local-search-geocoding-api/
        const geocoder = new MapboxGeocoder({
        // Initialize the geocoder
        accessToken: mapboxgl.accessToken, // Set the access token
        mapboxgl: mapboxgl, // Set the mapbox-gl instance
         });
        // Add the geocoder to the map
        map.addControl(geocoder);
        //  log data of search results
        geocoder.on('result', (data) => {
            
            let placeToVisit = {
                lat: (data.result.geometry.coordinates)[1],
                long: (data.result.geometry.coordinates)[0],
                title: data.result.text,
                place_name: data.result.place_name
            }
            console.log(placeToVisit);
                new mapboxgl.Popup().setHTML(
                    `<h4>${data.result.text}</h4>
                    <h5>Add to a trip</h5>
                    <form action="/trips/${trip._id}/addPlace?_method=PATCH" method="POST">
                        <input type="hidden" name="lat" value="${placeToVisit.lat}" />
                        <input type="hidden" name="long" value="${placeToVisit.long}" />
                        <input type="hidden" name="title" value="${placeToVisit.title}" />
                        <input type="hidden" name="place_name" value="${placeToVisit.place_name}" />
                        <input type="submit" value="Add"> 
                    </form>
                    `)
                .setLngLat(data.result.center).addTo(map)
            
        });

        //  add direction functionality
        let mapDirections = new MapboxDirections({ 
            accessToken: mapboxgl.accessToken,
            interactive: false
        })
        map.addControl(mapDirections, 'top-left')


        map.on('load', () => {   
                
            // EVENT HANDLERS
            let zoomIntoClickedPlace = (e) => {
                let placeTitle = e.currentTarget.querySelector('.place-title').innerText
                let placeName = e.currentTarget.querySelector('.place-name').innerText
                console.log(placeTitle, placeName);
                
                let placeClicked = trip.places_to_visit.filter((place) => {
                        return place.title === placeTitle && place.place_name === placeName
                })[0]

                map.flyTo({
                    center: [placeClicked.long, placeClicked.lat],
                    zoom: 15
                })
            }

            let getDirectionsFromCurrentLocation = (e) => {
                let placeToGoTitle = e.currentTarget.previousElementSibling.querySelector('.place-title').innerText
                let placeToGoName = e.currentTarget.previousElementSibling.querySelector('.place-name').innerText

                let placeToGo =  trip.places_to_visit.filter((place) => {
                        return place.title === placeToGoTitle && place.place_name === placeToGoName
                })[0]
                mapDirections.setDestination([placeToGo.long, placeToGo.lat])

                //  set current location as origin using navigator geolocation API
                navigator.geolocation.getCurrentPosition(
                (position) => {
                    mapDirections.setOrigin([position.coords.longitude, position.coords.latitude])
                }, 
                (position) => {
                    mapDirections.setOrigin([-70, 40])
                }
                ,{
                    enableHighAccuracy: true
                }
            )
            }

            // EVENT LISTENERS
        
            let places = document.querySelectorAll('.place')
            places.forEach((place) => {
                place.addEventListener('click', zoomIntoClickedPlace)
            })

            let directionsButtons = document.querySelectorAll('.go-to-place')
            directionsButtons.forEach((button) => {
                button.addEventListener('click', getDirectionsFromCurrentLocation)
            })
            

        })
    

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
</body>
</html>
