<div class="sidebar-view" id="sidebar">
    <div class="side-flex">
        <side id="collapseSidebar" class="sidebar">
            <div class="title-container">
                <h3>Your trips:</h3>
                <a href="/trips/new" class="btn btn-primary">Plan a trip</a>
            </div>
            <ul>
                <%if (userId) { %>
                    <% let tripsList = JSON.parse(trips) %>
                    <% tripsList =  tripsList.sort((a,b) => new Date(b.start_date) - new Date(a.start_date)) %>
                    <% let groupTripsByYear = tripsList.reduce((newData, trip) => { %>
                        <% let key = trip.start_date ? new Date(trip['start_date']).getFullYear() : 'Unscheduled' %>
                        <% if(!newData[key]) { %>
                            <% newData[key] = [] %>
                            <% } %>
                        <% newData[key].push(trip) %>
                        <% return newData %>
                        <% } , {}) %>
                        <% for (year in groupTripsByYear) { %>
                            <li class="mb-1 card">
                                <div class="card-body">
                                    <button class="btn btn-toggle rounded" data-bs-toggle="collapse" data-bs-target="#home-collapse" aria-expanded="false">
                                        <h4>> <%= year%></h4>
                                    </button>
                                    <div class="collapse" id="home-collapse">
                                        <ul class="btn-toggle-nav list-unstyled fw-normal pb-1">
                                        <%(groupTripsByYear[year]).forEach((trip) => { %>
                                            <li><a class="link-dark rounded" href="/trips/<%= trip._id %>"><%= trip.name %></a>
                                            <% }) %>
                                        </ul>
                                    </div>
                                </div>
                            </li>
                            <% } %>
                    <% } else { %>
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">No trips listed yet</h5>
                                <p class="card-text">Click below to plan your first trip or take a look at one of the suggested trips to add on your bucketlist!</p>
                                <a href="/trips/new" class="btn btn-primary">Plan a new trip</a>
                            </div>
                        </div>
                        <% } %>
            </ul>
            <ul class="border-top my-3"></ul>
            <h3>Suggested trips</h3>
            <ul class="list-unstyled ps-0">
                <li class="mb-1">
                    <div class="collapse show" id="home-collapse" style="">
                        <% JSON.parse(suggestedTrips).forEach((trip) => { %>
                            <li><a class="link-dark rounded" href="/trips/toAdd/<%= trip._id %>"><%= trip.name %></a></li>
                            <% }) %>
                    </div>
                </li>
            </ul>
        </side>
        <button class="btn btn-secondary" type="button" id="collapseToggle">
            <
        </button>
    </div>
    <div id='map' style='width: 100vw; height: 100vh;'>
    </div>
</div>
<!-- CLIENT SIDE -->
<script>
    document.querySelector('#collapseToggle').addEventListener('click', () => {
        document.querySelector('#collapseSidebar').classList.toggle('hidden')
    })

    // access the places in the database
    let trips= JSON.parse('<%- trips %>')

    //  make the map
    mapboxgl.accessToken  = '<%= process.env.MAPBOX_ACCESS_TOKEN %>'
    const map = new mapboxgl.Map({
    container: 'map', // container ID
    style: 'mapbox://styles/mapbox/streets-v11', // style URL
    zoom: 1// starting zoom
    });

    //  add markers from the database
    trips.forEach((trip) => {
        if (trip.places_to_visit.length > 0) {
            trip.places_to_visit.forEach((pin) => {
                let marker = new mapboxgl.Marker({
                    color: "#F05441"
                }).setLngLat([pin.long, pin.lat])
                .setPopup(new mapboxgl.Popup().setHTML(`<h4>${pin.title}</h4>`)) 
                .addTo(map);
            })
        }
    })
    // Add zoom and rotation controls to the map.
    const nav = new mapboxgl.NavigationControl();
    map.addControl(nav, 'top-left');
    // Add searchbox via geocoding api: src: https://docs.mapbox.com/help/tutorials/local-search-geocoding-api/
    const geocoder = new MapboxGeocoder({
        // Initialize the geocoder
        accessToken: mapboxgl.accessToken, // Set the access token
        mapboxgl: mapboxgl, // Set the mapbox-gl instance
    });
    // Add the geocoder to the map
    map.addControl(geocoder);
    //  log data of search results
    geocoder.on('result', (data) => {
        let placeToVisit = {
            lat: (data.result.geometry.coordinates)[1],
            long: (data.result.geometry.coordinates)[0],
            title: data.result.text,
        }
    });
</script>